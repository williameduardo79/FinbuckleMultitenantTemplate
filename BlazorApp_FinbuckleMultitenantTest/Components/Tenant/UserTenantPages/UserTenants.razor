@page "/tenant/usertenants"
@using BlazorApp_FinbuckleMultitenantTest.Configurations
@using BlazorApp_FinbuckleMultitenantTest.Data
@using BlazorApp_FinbuckleMultitenantTest.Models
@using BlazorApp_FinbuckleMultitenantTest.Services
@using Finbuckle.MultiTenant.Abstractions
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@inject IUserTenantService UserTenantService
@inject NavigationManager Navigation
@inject UserTenantRoleService tenantRoleService


@attribute [Authorize(Roles = "TenantsAdmin")]

<h3>User-Tenants</h3>

@if (userTenants == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User</th>
                <th>Tenants & Roles</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ut in userTenants)
            {
                <tr>
                    <td>@ut.user.Email</td>
                    <td>
                        @if (ut.TenantRoleDTOs != null && ut.TenantRoleDTOs.Any())
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Tenant</th>
                                        <th>Roles</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var tenantRole in ut.TenantRoleDTOs)
                                    {
                                        <tr>
                                            <td>@tenantRole.UserWithTenant.Tenant.Name</td>
                                            <td>
                                                @(tenantRole.UserTenantRoles?.Any() ?? false
                                                    ? string.Join(", ", tenantRole.UserTenantRoles.Select(r => r.Role.Name))
                                                    : "No Roles")
                                            </td>
                                            <td>
                                                <button @onclick="() => EditUserTenant(ut.UserId, tenantRole.TenantId)" class="btn btn-primary btn-sm">Edit</button>
                                                <button @onclick="() => DeleteUserTenant(ut.UserId, tenantRole.TenantId)" class="btn btn-danger btn-sm">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p>No tenants assigned</p>
                        }
                    </td>
                    <td>
                        <button @onclick="() => UpdateTenant(ut.UserId)" class="btn btn-success btn-sm">Add Tenant</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="CreateUserTenant" class="btn btn-success">Add User-Tenant</button>
}

@code {
    private List<UserTenantRoleDTO> userTenants = new();

    protected override async Task OnInitializedAsync()
    {
        userTenants = await tenantRoleService.GetAllUserTenantsWithRoles();
       
        //var userTenantRole = await UserManager.GetRolesAsync()
    }

    private void CreateUserTenant()
    {
        Navigation.NavigateTo("/tenant/usertenantupdate");
    }
    private void UpdateTenant(string userId)
    {
        Navigation.NavigateTo($"/tenant/usertenantupdate/{userId}");
    }

    private void EditUserTenant(string userId, string tenantId)
    {
        Navigation.NavigateTo($"/tenant/usertenantupdate/{userId}/{tenantId}");
    }

    private async Task DeleteUserTenant(string userId, string tenantId)
    {
        if (await UserTenantService.DeleteUserTenantAsync(userId, tenantId))
        {
            userTenants = await tenantRoleService.GetAllUserTenantsWithRoles();
            StateHasChanged();
        }
    }
}
