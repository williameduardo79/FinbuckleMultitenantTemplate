@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorApp_FinbuckleMultitenantTest.Configurations
@using BlazorApp_FinbuckleMultitenantTest.Services
@using Finbuckle.MultiTenant.Abstractions
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorApp_FinbuckleMultitenantTest.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Http;



@inject TenantUserManager UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IMultiTenantContextAccessor<AppTenantInfo> _tenantAccessor
@inject IHttpContextAccessor httpContextAccessor
@inject IUserTenantService tenantService

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser
            {
                UserName = Input.Email,
                Email = Input.Email
                
            };

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);




        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }
        if (SignInManager == null)
        {
            Console.WriteLine("SigninManager is null");
        }

       
        //await SignInManager.SignInAsync(existingUser, isPersistent: false);

        // var principal = await SignInManager.CreateUserPrincipalAsync(existingUser);
        // var httpContext = httpContextAccessor.HttpContext;

        // if (httpContext != null)
        // {
        //     await httpContext.SignInAsync(IdentityConstants.ApplicationScheme, principal, new AuthenticationProperties { IsPersistent = true });
        // }
        // else
        // {
        //     throw new Exception("HttpContext is null. Ensure IHttpContextAccessor is registered.");
        // }
        var tenantInfo = _tenantAccessor.MultiTenantContext.TenantInfo;
        

        if (tenantInfo != null)
        {
            
            UserTenant userTenant = new UserTenant()
                {
                    UserId = user.Id,
                    User = user,
                    TenantId = tenantInfo.Id,
                    Tenant = tenantInfo
                };


            //await tenantService.CreateUserTenantAsync(userTenant);

            var existingUser = await UserManager.FindByEmailAsync(user.Email);
            if (existingUser == null)
            {
                throw new Exception("User not found.");
            }
            if (SignInManager == null)
                throw new Exception("SignInManager is null");

            if (SignInManager.Context == null)
                throw new Exception("HttpContext is null in SignInManager");

            if (SignInManager.ClaimsFactory == null)
                throw new Exception("UserClaimsPrincipalFactory is null in SignInManager");

            if (UserManager == null)
                throw new Exception("UserManager is null in SignInManager");


            var principal = await SignInManager.ClaimsFactory.CreateAsync(existingUser);
            if (principal == null)
                throw new Exception("Failed to create ClaimsPrincipal for user.");

            //await SignInManager.PasswordSignInAsync(user, Input.Password, false, lockoutOnFailure: false);
            
            await SignInManager.SignInAsync(user, isPersistent: false);
        }
       
        
        

        // var principal = await SignInManager.CreateUserPrincipalAsync(user);
        // await HttpContext.SignInAsync(IdentityConstants.ApplicationScheme, principal);

        // Optionally, you can sign the user in with the tenant-specific claims if needed
    //     var userClaimsPrincipal = await SignInManager.CreateUserPrincipalAsync(user);
    //     userClaimsPrincipal.AddIdentity(new ClaimsIdentity(new[]
    //     {
    //     new Claim("tenant_id", tenantInfo?.Id ?? ""),
    //     new Claim("tenant_name", tenantInfo?.Identifier ?? "")
    // }));
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
